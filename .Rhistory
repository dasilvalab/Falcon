dge <- calcNormFactors(dge)
design <- model.matrix(~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3, data = colData)
v <- voom(dge, design = design, plot = FALSE)
fit <- lmFit(v)
fit <- eBayes(fit)
res_limma <- topTable(fit, coef = 2, sort.by = "logFC",  number = n_genes)
# edgeR analysis with design ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3
dge_edgeR <- DGEList(counts = gene_data_filtered, group = group)
dge_edgeR <- calcNormFactors(dge_edgeR)
dge_edgeR <- estimateDisp(dge_edgeR, design = design)
fit_edgeR <- glmQLFit(dge_edgeR, design = design)
qlf_edgeR <- glmQLFTest(fit_edgeR, contrast = c(0, 1, 0, 0, 0, 0))  # This contrast isolates the Group effect
res_edgeR <- topTags(qlf_edgeR, n = n_genes)
DEGs_deseq2 <- which(res_deseq2$padj < adj_pval_threshold)
# Find the DEGs based on p-value (adjusted p-value < 0.05)
adj_pval_threshold <- 0.05
DEGs_deseq2 <- which(res_deseq2$padj < adj_pval_threshold)
DEGs_limma <- which(res_limma$adj.P.Val < adj_pval_threshold)
DEGs_edgeR <- which(res_edgeR$table$FDR < adj_pval_threshold)
venn.plot <- venn.diagram(
x = list(DESeq2 = DEGs_deseq2, limma = DEGs_limma, edgeR = DEGs_edgeR),
category.names = c("DESeq2", "limma", "edgeR"),
filename = NULL,
output = TRUE
)
grid.draw(venn.plot)
# Define your ground truth and results for each method
ground_truth <- group_affected_genes
# DEGs detected by each method
DEGs_deseq2 <- which(res_deseq2$padj < 0.05)  # Adjust the threshold as necessary
DEGs_limma <- which(res_limma$adj.P.Val < 0.05)
DEGs_edgeR <- which(res_edgeR$table$FDR < 0.05)
# Define a function to calculate TP, FP, FN, and TN
calculate_metrics <- function(predicted, ground_truth, n_genes) {
TP <- length(intersect(predicted, ground_truth))                 # True positives
FP <- length(setdiff(predicted, ground_truth))                   # False positives
FN <- length(setdiff(ground_truth, predicted))                   # False negatives
TN <- n_genes - length(union(predicted, ground_truth))           # True negatives
return(data.frame(TP = TP, FP = FP, FN = FN, TN = TN))
}
# Calculate metrics for each method
metrics_deseq2 <- calculate_metrics(DEGs_deseq2, ground_truth, n_genes)
metrics_limma <- calculate_metrics(DEGs_limma, ground_truth, n_genes)
metrics_edgeR <- calculate_metrics(DEGs_edgeR, ground_truth, n_genes)
# Calculate percentages for each metric
calculate_percentages <- function(metrics) {
total_predictions <- metrics$TP + metrics$FP + metrics$FN + metrics$TN
TP_percent <- (metrics$TP / total_predictions) * 100
FP_percent <- (metrics$FP / total_predictions) * 100
FN_percent <- (metrics$FN / total_predictions) * 100
TN_percent <- (metrics$TN / total_predictions) * 100
return(data.frame(TP_percent, FP_percent, FN_percent, TN_percent))
}
# Calculate percentages for each method
percentages_deseq2 <- calculate_percentages(metrics_deseq2)
percentages_limma <- calculate_percentages(metrics_limma)
percentages_edgeR <- calculate_percentages(metrics_edgeR)
# Combine results into a single data frame
results <- data.frame(
Method = c("DESeq2", "limma", "edgeR"),
TP = c(metrics_deseq2$TP, metrics_limma$TP, metrics_edgeR$TP),
FP = c(metrics_deseq2$FP, metrics_limma$FP, metrics_edgeR$FP),
FN = c(metrics_deseq2$FN, metrics_limma$FN, metrics_edgeR$FN),
TN = c(metrics_deseq2$TN, metrics_limma$TN, metrics_edgeR$TN),
TP_percent = c(percentages_deseq2$TP_percent, percentages_limma$TP_percent, percentages_edgeR$TP_percent),
FP_percent = c(percentages_deseq2$FP_percent, percentages_limma$FP_percent, percentages_edgeR$FP_percent),
FN_percent = c(percentages_deseq2$FN_percent, percentages_limma$FN_percent, percentages_edgeR$FN_percent),
TN_percent = c(percentages_deseq2$TN_percent, percentages_limma$TN_percent, percentages_edgeR$TN_percent)
)
# Display the result
print(results)
a<-FalconNest(counts = gene_data_filtered, colData = colData, design = ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3)
setwd("/Volumes/Shr6/Neuroscience/da_Silva_lab/Daniel/Projects/ANCOVA/final/Falcon")
library(devtools)
load_all()
a<-FalconNest(counts = gene_data_filtered, colData = colData, design = ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3)
b<-FalconPreen(object = a, group = "Group", mean.pick=0, cv.pick=100)
plotNoiseCorrection(b)
c<-FalconHatch(object = b, p.adjust="BH", random.covar = FALSE, shuffle.group = FALSE, FalconOutput= FALSE)
res_Falcon<-getResults(object = c, p.adjusted = 1, extendedData = FALSE)
plotDispEsts(dds)
# DEGs detected by each method (with p-value < 0.05)
DEGs_deseq2 <- which(res_deseq2$padj < adj_pval_threshold)
DEGs_limma <- which(res_limma$adj.P.Val < adj_pval_threshold)
DEGs_edgeR <- which(res_edgeR$table$FDR < adj_pval_threshold)
DEGs_Falcon<- which(res_Falcon$FDR < adj_pval_threshold)
# Venn diagram for overlap of DEGs between methods
venn.plot <- venn.diagram(
x = list(DESeq2 = DEGs_deseq2, limma = DEGs_limma, edgeR = DEGs_edgeR, Falcon=DEGs_Falcon),
category.names = c("DESeq2", "limma", "edgeR", "Falcon"),
filename = NULL,
output = TRUE
)
grid.draw(venn.plot)
metrics_Falcon <- calculate_metrics(DEGs_Falcon, ground_truth, n_genes)
percentages_Falcon <- calculate_percentages(metrics_Falcon)
# Combine results into a single data frame
results <- data.frame(
Method = c("DESeq2", "limma", "edgeR", "Falcon"),
TP = c(metrics_deseq2$TP, metrics_limma$TP, metrics_edgeR$TP, metrics_Falcon$TP),
FP = c(metrics_deseq2$FP, metrics_limma$FP, metrics_edgeR$FP,metrics_Falcon$FP),
FN = c(metrics_deseq2$FN, metrics_limma$FN, metrics_edgeR$FN,metrics_Falcon$FN),
TN = c(metrics_deseq2$TN, metrics_limma$TN, metrics_edgeR$TN,metrics_Falcon$TN),
TP_percent = c(percentages_deseq2$TP_percent, percentages_limma$TP_percent, percentages_edgeR$TP_percent,percentages_Falcon$TP_percent),
FP_percent = c(percentages_deseq2$FP_percent, percentages_limma$FP_percent, percentages_edgeR$FP_percent,percentages_Falcon$FP_percent),
FN_percent = c(percentages_deseq2$FN_percent, percentages_limma$FN_percent, percentages_edgeR$FN_percent,percentages_Falcon$FN_percent),
TN_percent = c(percentages_deseq2$TN_percent, percentages_limma$TN_percent, percentages_edgeR$TN_percent,percentages_Falcon$TN_percent)
)
# Display the result
print(results)
if (!requireNamespace("Splatter", quietly = TRUE)) {
BiocManager::install("Splatter")
}
# Display the result
print(results)
set.seed(42)  # For reproducibility
# Parameters
n_genes <- 12000
n_samples <- 60
# Define the proportions of genes for each distribution type
proportion_nb <- 0.5    # 50% Negative Binomial
proportion_poisson <- 0.3  # 30% Poisson
proportion_log_normal <- 0.2  # 20% Log-Normal
# Calculate the number of genes for each distribution
n_nb_genes <- round(n_genes * proportion_nb)
n_poisson_genes <- round(n_genes * proportion_poisson)
n_log_normal_genes <- n_genes - (n_nb_genes + n_poisson_genes)  # Remaining genes
nb_mu <- 50  # Mean count for NB-distributed genes
nb_size <- 0.5  # Dispersion parameter (lower values increase variance)
nb_counts <- matrix(rnbinom(n_nb_genes * n_samples, size = nb_size, mu = nb_mu),
nrow = n_nb_genes, ncol = n_samples)
poisson_lambda <- 20  # Mean count for Poisson-distributed genes
poisson_counts <- matrix(rpois(n_poisson_genes * n_samples, lambda = poisson_lambda),
nrow = n_poisson_genes, ncol = n_samples)
log_normal_meanlog <- log(10)  # Log scale mean for Log-Normal-distributed genes
log_normal_sdlog <- 1  # Log scale standard deviation
log_normal_counts <- matrix(round(rlnorm(n_log_normal_genes * n_samples, meanlog = log_normal_meanlog, sdlog = log_normal_sdlog)),
nrow = n_log_normal_genes, ncol = n_samples)
# Combine all count matrices into one
counts <- rbind(nb_counts, poisson_counts, log_normal_counts)
# Assign gene names and sample names
rownames(counts) <- paste0("Gene_", 1:n_genes)
colnames(counts) <- paste0("Sample_", 1:n_samples)
# Define groups
group <- factor(rep(c("Group_A", "Group_B"), each = n_samples / 2))
# Set a subset of genes as DE between groups
de_genes <- sample(1:n_genes, size = floor(0.1 * n_genes))  # 10% of genes are DE
# Apply fold change for Group_B in DE genes
fold_change <- 1.5  # 1.5x fold change
counts[de_genes, group == "Group_B"] <- counts[de_genes, group == "Group_B"] * fold_change
# Define continuous covariates
covariate_1 <- scale(rnorm(n_samples, mean = 3, sd = 1))  # Covariate 1
cov1_genes <- sample(1:n_genes, size = floor(0.3 * n_genes))  # 30% of genes affected by covariate 1
# Apply covariate effect to affected genes
for (gene in cov1_genes) {
covariate_1_effect <- covariate_1 * rnorm(n_samples, mean = 0.5, sd = 0.1)  # Scale of effect
counts[gene, ] <- counts[gene, ] + covariate_1_effect
}
# Ensure no negative counts after adjustment
counts <- pmax(counts, 0)
# Create metadata
colData <- data.frame(
Group = group,
Covariate_1 = covariate_1
)
rownames(colData) <- colnames(counts)
# Convert counts to integers for compatibility with DE analysis
counts <- round(counts)
# View a summary of the counts
summary(counts)
set.seed(42)  # For reproducibility
# Parameters
n_genes <- 12000
n_samples <- 60
percentage_effect_gender <- 0.5    # Effect percentage for Female
percentage_effect_group <- 1       # Effect percentage for Group_B
# Define sample groups and covariates
gender <- rep(c("Male", "Female"), each = n_samples / 2)
group <- rep(c("Group_A", "Group_B"), each = n_samples / 2)
covariate_1 <- scale(rnorm(n_samples, mean = 3, sd = 1))
covariate_2 <- scale(rnorm(n_samples, mean = 5, sd = 2))
covariate_3 <- scale(rnorm(n_samples, mean = 10, sd = 3))
colData <- data.frame(
Gender = gender,
Group = group,
Covariate_1 = covariate_1,
Covariate_2 = covariate_2,
Covariate_3 = covariate_3
)
# Define proportions of each distribution type
proportion_nb <- 0.5
proportion_poisson <- 0.3
proportion_log_normal <- 0.2
n_nb_genes <- round(n_genes * proportion_nb)
n_poisson_genes <- round(n_genes * proportion_poisson)
n_log_normal_genes <- n_genes - (n_nb_genes + n_poisson_genes)
# Generate counts based on hybrid distributions
nb_counts <- matrix(rnbinom(n_nb_genes * n_samples, size = 0.5, mu = 50), nrow = n_nb_genes, ncol = n_samples)
poisson_counts <- matrix(rpois(n_poisson_genes * n_samples, lambda = 20), nrow = n_poisson_genes, ncol = n_samples)
log_normal_counts <- matrix(round(rlnorm(n_log_normal_genes * n_samples, meanlog = log(10), sdlog = 1)), nrow = n_log_normal_genes, ncol = n_samples)
# Combine counts
gene_data <- rbind(nb_counts, poisson_counts, log_normal_counts)
rownames(gene_data) <- paste0("Gene_", 1:n_genes)
colnames(gene_data) <- paste0("Sample_", 1:n_samples)
# Apply Gender Effect
gender_affected_genes <- sample(1:n_genes, size = floor(n_genes * 0.3))
for (gene in gender_affected_genes) {
baseline_expression <- gene_data[gene, ]
gender_effect <- rep(0, n_samples)
gender_effect[colData$Gender == "Female"] <- baseline_expression[colData$Gender == "Female"] * percentage_effect_gender
gene_data[gene, ] <- gene_data[gene, ] + gender_effect
}
# Apply Group Effect
group_affected_genes <- sample(1:n_genes, size = floor(n_genes * 0.1))
for (gene in group_affected_genes) {
baseline_expression <- gene_data[gene, ]
group_effect <- rep(0, n_samples)
group_effect[colData$Group == "Group_B"] <- baseline_expression[colData$Group == "Group_B"] * percentage_effect_group
gene_data[gene, ] <- gene_data[gene, ] + group_effect
}
# Apply Covariate Effects
numeric_cov_1_effect <- sample(1:n_genes, size = floor(n_genes * 0.4))
for (gene in numeric_cov_1_effect) {
covariate_1_effect <- covariate_1 * rnorm(n_samples, mean = mean(covariate_1), sd = 5)
gene_data[gene, ] <- gene_data[gene, ] + covariate_1_effect
}
numeric_cov_2_effect <- sample(1:n_genes, size = floor(n_genes * 0.2))
for (gene in numeric_cov_2_effect) {
covariate_2_effect <- covariate_2 * rnorm(n_samples, mean = mean(covariate_2), sd = 5)
gene_data[gene, ] <- gene_data[gene, ] + covariate_2_effect
}
numeric_cov_3_effect <- sample(1:n_genes, size = floor(n_genes * 0.6))
for (gene in numeric_cov_3_effect) {
covariate_3_effect <- covariate_3 * rnorm(n_samples, mean = mean(covariate_3), sd = 6)
gene_data[gene, ] <- gene_data[gene, ] + covariate_3_effect
}
# Ensure non-negative counts and round to integers
gene_data <- pmax(gene_data, 0)
gene_data <- round(gene_data)
# Check the resulting matrix
dim(gene_data)
summary(gene_data)
set.seed(42)  # For reproducibility
# Parameters
n_genes <- 12000
n_samples <- 60
percentage_effect_gender <- 0.5    # Effect percentage for Female
percentage_effect_group <- 1       # Effect percentage for Group_B
# Define sample groups and covariates
gender <- rep(c("Male", "Female"), each = n_samples / 2)
group <- rep(c("Group_A", "Group_B"), each = n_samples / 2)
covariate_1 <- scale(rnorm(n_samples, mean = 3, sd = 1))
covariate_2 <- scale(rnorm(n_samples, mean = 5, sd = 2))
covariate_3 <- scale(rnorm(n_samples, mean = 10, sd = 3))
colData <- data.frame(
Gender = gender,
Group = group,
Covariate_1 = covariate_1,
Covariate_2 = covariate_2,
Covariate_3 = covariate_3
)
# Define proportions of each distribution type
proportion_nb <- 0.5
proportion_poisson <- 0.3
proportion_log_normal <- 0.2
n_nb_genes <- round(n_genes * proportion_nb)
n_poisson_genes <- round(n_genes * proportion_poisson)
n_log_normal_genes <- n_genes - (n_nb_genes + n_poisson_genes)
# Generate counts based on hybrid distributions
nb_counts <- matrix(rnbinom(n_nb_genes * n_samples, size = 0.5, mu = 50), nrow = n_nb_genes, ncol = n_samples)
poisson_counts <- matrix(rpois(n_poisson_genes * n_samples, lambda = 20), nrow = n_poisson_genes, ncol = n_samples)
log_normal_counts <- matrix(round(rlnorm(n_log_normal_genes * n_samples, meanlog = log(10), sdlog = 1)), nrow = n_log_normal_genes, ncol = n_samples)
# Combine counts
gene_data <- rbind(nb_counts, poisson_counts, log_normal_counts)
rownames(gene_data) <- paste0("Gene_", 1:n_genes)
colnames(gene_data) <- paste0("Sample_", 1:n_samples)
# Apply Gender Effect
gender_affected_genes <- sample(1:n_genes, size = floor(n_genes * 0.3))
for (gene in gender_affected_genes) {
baseline_expression <- gene_data[gene, ]
gender_effect <- rep(0, n_samples)
gender_effect[colData$Gender == "Female"] <- baseline_expression[colData$Gender == "Female"] * percentage_effect_gender
gene_data[gene, ] <- gene_data[gene, ] + gender_effect
}
# Apply Group Effect
group_affected_genes <- sample(1:n_genes, size = floor(n_genes * 0.1))
for (gene in group_affected_genes) {
baseline_expression <- gene_data[gene, ]
group_effect <- rep(0, n_samples)
group_effect[colData$Group == "Group_B"] <- baseline_expression[colData$Group == "Group_B"] * percentage_effect_group
gene_data[gene, ] <- gene_data[gene, ] + group_effect
}
# Apply Covariate Effects
numeric_cov_1_effect <- sample(1:n_genes, size = floor(n_genes * 0.4))
for (gene in numeric_cov_1_effect) {
covariate_1_effect <- covariate_1 * rnorm(n_samples, mean = mean(covariate_1), sd = 5)
gene_data[gene, ] <- gene_data[gene, ] + covariate_1_effect
}
numeric_cov_2_effect <- sample(1:n_genes, size = floor(n_genes * 0.2))
for (gene in numeric_cov_2_effect) {
covariate_2_effect <- covariate_2 * rnorm(n_samples, mean = mean(covariate_2), sd = 5)
gene_data[gene, ] <- gene_data[gene, ] + covariate_2_effect
}
numeric_cov_3_effect <- sample(1:n_genes, size = floor(n_genes * 0.6))
for (gene in numeric_cov_3_effect) {
covariate_3_effect <- covariate_3 * rnorm(n_samples, mean = mean(covariate_3), sd = 6)
gene_data[gene, ] <- gene_data[gene, ] + covariate_3_effect
}
# Ensure non-negative counts and round to integers
gene_data <- pmax(gene_data, 0)
gene_data <- round(gene_data)
# Check the resulting matrix
dim(gene_data)
summary(gene_data)
gene_data_filtered <- gene_data[rowSums(gene_data > 0) > 0.2 * n_samples, ]
# DESeq2 analysis with design ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3 + Covariate_4
dds <- DESeqDataSetFromMatrix(countData = gene_data_filtered, colData = colData, design = ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3)
colData
# Parameters
n_genes <- 12000
n_samples <- 60
percentage_effect_gender <- 0.5    # Effect percentage for Female
percentage_effect_group <- 1       # Effect percentage for Group_B
# Define sample groups and covariates
gender <- rep(c("Male", "Female"), each = 15) # 10 males and 10 females per group
group <- rep(c("Group_A", "Group_B"), each = 30) # 20 in each group
covariate_1 <- scale(rnorm(n_samples, mean = 3, sd = 1))
covariate_2 <- scale(rnorm(n_samples, mean = 5, sd = 2))
covariate_3 <- scale(rnorm(n_samples, mean = 10, sd = 3))
colData <- data.frame(
Gender = gender,
Group = group,
Covariate_1 = covariate_1,
Covariate_2 = covariate_2,
Covariate_3 = covariate_3
)
# Define proportions of each distribution type
proportion_nb <- 0.5
proportion_poisson <- 0.3
proportion_log_normal <- 0.2
n_nb_genes <- round(n_genes * proportion_nb)
n_poisson_genes <- round(n_genes * proportion_poisson)
n_log_normal_genes <- n_genes - (n_nb_genes + n_poisson_genes)
# Generate counts based on hybrid distributions
nb_counts <- matrix(rnbinom(n_nb_genes * n_samples, size = 0.5, mu = 50), nrow = n_nb_genes, ncol = n_samples)
poisson_counts <- matrix(rpois(n_poisson_genes * n_samples, lambda = 20), nrow = n_poisson_genes, ncol = n_samples)
log_normal_counts <- matrix(round(rlnorm(n_log_normal_genes * n_samples, meanlog = log(10), sdlog = 1)), nrow = n_log_normal_genes, ncol = n_samples)
# Combine counts
gene_data <- rbind(nb_counts, poisson_counts, log_normal_counts)
rownames(gene_data) <- paste0("Gene_", 1:n_genes)
colnames(gene_data) <- paste0("Sample_", 1:n_samples)
# Apply Gender Effect
gender_affected_genes <- sample(1:n_genes, size = floor(n_genes * 0.3))
for (gene in gender_affected_genes) {
baseline_expression <- gene_data[gene, ]
gender_effect <- rep(0, n_samples)
gender_effect[colData$Gender == "Female"] <- baseline_expression[colData$Gender == "Female"] * percentage_effect_gender
gene_data[gene, ] <- gene_data[gene, ] + gender_effect
}
# Apply Group Effect
group_affected_genes <- sample(1:n_genes, size = floor(n_genes * 0.1))
for (gene in group_affected_genes) {
baseline_expression <- gene_data[gene, ]
group_effect <- rep(0, n_samples)
group_effect[colData$Group == "Group_B"] <- baseline_expression[colData$Group == "Group_B"] * percentage_effect_group
gene_data[gene, ] <- gene_data[gene, ] + group_effect
}
# Apply Covariate Effects
numeric_cov_1_effect <- sample(1:n_genes, size = floor(n_genes * 0.4))
for (gene in numeric_cov_1_effect) {
covariate_1_effect <- covariate_1 * rnorm(n_samples, mean = mean(covariate_1), sd = 5)
gene_data[gene, ] <- gene_data[gene, ] + covariate_1_effect
}
numeric_cov_2_effect <- sample(1:n_genes, size = floor(n_genes * 0.2))
for (gene in numeric_cov_2_effect) {
covariate_2_effect <- covariate_2 * rnorm(n_samples, mean = mean(covariate_2), sd = 5)
gene_data[gene, ] <- gene_data[gene, ] + covariate_2_effect
}
numeric_cov_3_effect <- sample(1:n_genes, size = floor(n_genes * 0.6))
for (gene in numeric_cov_3_effect) {
covariate_3_effect <- covariate_3 * rnorm(n_samples, mean = mean(covariate_3), sd = 6)
gene_data[gene, ] <- gene_data[gene, ] + covariate_3_effect
}
# Ensure non-negative counts and round to integers
gene_data <- pmax(gene_data, 0)
gene_data <- round(gene_data)
# Check the resulting matrix
dim(gene_data)
summary(gene_data)
gene_data_filtered <- gene_data[rowSums(gene_data > 0) > 0.2 * n_samples, ]
# DESeq2 analysis with design ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3 + Covariate_4
dds <- DESeqDataSetFromMatrix(countData = gene_data_filtered, colData = colData, design = ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3)
dds <- DESeq(dds)
res_deseq2 <- results(dds, contrast = c("Group", "Group_B", "Group_A"))
# limma analysis with design ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3
dge <- DGEList(counts = gene_data_filtered, group = group)
dge <- calcNormFactors(dge)
design <- model.matrix(~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3, data = colData)
v <- voom(dge, design = design, plot = FALSE)
fit <- lmFit(v)
fit <- eBayes(fit)
res_limma <- topTable(fit, coef = 2, sort.by = "logFC",  number = n_genes)
# edgeR analysis with design ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3
dge_edgeR <- DGEList(counts = gene_data_filtered, group = group)
dge_edgeR <- calcNormFactors(dge_edgeR)
dge_edgeR <- estimateDisp(dge_edgeR, design = design)
fit_edgeR <- glmQLFit(dge_edgeR, design = design)
qlf_edgeR <- glmQLFTest(fit_edgeR, contrast = c(0, 1, 0, 0, 0, 0))  # This contrast isolates the Group effect
res_edgeR <- topTags(qlf_edgeR, n = n_genes)
DEGs_deseq2 <- which(res_deseq2$padj < adj_pval_threshold)
DEGs_limma <- which(res_limma$adj.P.Val < adj_pval_threshold)
DEGs_edgeR <- which(res_edgeR$table$FDR < adj_pval_threshold)
a<-FalconNest(counts = gene_data_filtered, colData = colData, design = ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3)
colData
gene_data
rownmaes(colData)<-colnames(gene_data)
rownames(colData)<-colnames(gene_data)
gene_data_filtered <- gene_data[rowSums(gene_data > 0) > 0.2 * n_samples, ]
# DESeq2 analysis with design ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3 + Covariate_4
dds <- DESeqDataSetFromMatrix(countData = gene_data_filtered, colData = colData, design = ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3)
dds <- DESeq(dds)
res_deseq2 <- results(dds, contrast = c("Group", "Group_B", "Group_A"))
# limma analysis with design ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3
dge <- DGEList(counts = gene_data_filtered, group = group)
dge <- calcNormFactors(dge)
design <- model.matrix(~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3, data = colData)
v <- voom(dge, design = design, plot = FALSE)
fit <- lmFit(v)
fit <- eBayes(fit)
res_limma <- topTable(fit, coef = 2, sort.by = "logFC",  number = n_genes)
# edgeR analysis with design ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3
dge_edgeR <- DGEList(counts = gene_data_filtered, group = group)
dge_edgeR <- calcNormFactors(dge_edgeR)
dge_edgeR <- estimateDisp(dge_edgeR, design = design)
fit_edgeR <- glmQLFit(dge_edgeR, design = design)
qlf_edgeR <- glmQLFTest(fit_edgeR, contrast = c(0, 1, 0, 0, 0, 0))  # This contrast isolates the Group effect
res_edgeR <- topTags(qlf_edgeR, n = n_genes)
DEGs_deseq2 <- which(res_deseq2$padj < adj_pval_threshold)
DEGs_limma <- which(res_limma$adj.P.Val < adj_pval_threshold)
DEGs_edgeR <- which(res_edgeR$table$FDR < adj_pval_threshold)
a<-FalconNest(counts = gene_data_filtered, colData = colData, design = ~ Group + Gender + Covariate_1 + Covariate_2 + Covariate_3)
b<-FalconPreen(object = a, group = "Group", mean.pick=0, cv.pick=100)
plotNoiseCorrection(b)
c<-FalconHatch(object = b, p.adjust="BH", random.covar = FALSE, shuffle.group = FALSE, FalconOutput= FALSE)
res_Falcon<-getResults(object = c, p.adjusted = 1, extendedData = FALSE)
# Find the DEGs based on p-value (adjusted p-value < 0.05)
adj_pval_threshold <- 0.05
# DEGs detected by each method (with p-value < 0.05)
DEGs_deseq2 <- which(res_deseq2$padj < adj_pval_threshold)
DEGs_limma <- which(res_limma$adj.P.Val < adj_pval_threshold)
DEGs_edgeR <- which(res_edgeR$table$FDR < adj_pval_threshold)
DEGs_Falcon<- which(res_Falcon$FDR < adj_pval_threshold)
# Venn diagram for overlap of DEGs between methods
venn.plot <- venn.diagram(
x = list(DESeq2 = DEGs_deseq2, limma = DEGs_limma, edgeR = DEGs_edgeR, Falcon=DEGs_Falcon),
category.names = c("DESeq2", "limma", "edgeR", "Falcon"),
filename = NULL,
output = TRUE
)
grid.draw(venn.plot)
# DEGs detected by each method
DEGs_deseq2 <- which(res_deseq2$padj < 0.05)  # Adjust the threshold as necessary
DEGs_limma <- which(res_limma$adj.P.Val < 0.05)
DEGs_edgeR <- which(res_edgeR$table$FDR < 0.05)
# Define a function to calculate TP, FP, FN, and TN
calculate_metrics <- function(predicted, ground_truth, n_genes) {
TP <- length(intersect(predicted, ground_truth))                 # True positives
FP <- length(setdiff(predicted, ground_truth))                   # False positives
FN <- length(setdiff(ground_truth, predicted))                   # False negatives
TN <- n_genes - length(union(predicted, ground_truth))           # True negatives
return(data.frame(TP = TP, FP = FP, FN = FN, TN = TN))
}
# Calculate metrics for each method
metrics_deseq2 <- calculate_metrics(DEGs_deseq2, ground_truth, n_genes)
metrics_limma <- calculate_metrics(DEGs_limma, ground_truth, n_genes)
metrics_edgeR <- calculate_metrics(DEGs_edgeR, ground_truth, n_genes)
metrics_Falcon <- calculate_metrics(DEGs_Falcon, ground_truth, n_genes)
# Calculate percentages for each metric
calculate_percentages <- function(metrics) {
total_predictions <- metrics$TP + metrics$FP + metrics$FN + metrics$TN
TP_percent <- (metrics$TP / total_predictions) * 100
FP_percent <- (metrics$FP / total_predictions) * 100
FN_percent <- (metrics$FN / total_predictions) * 100
TN_percent <- (metrics$TN / total_predictions) * 100
return(data.frame(TP_percent, FP_percent, FN_percent, TN_percent))
}
# Calculate percentages for each method
percentages_deseq2 <- calculate_percentages(metrics_deseq2)
percentages_limma <- calculate_percentages(metrics_limma)
percentages_edgeR <- calculate_percentages(metrics_edgeR)
percentages_Falcon <- calculate_percentages(metrics_Falcon)
# Combine results into a single data frame
results <- data.frame(
Method = c("DESeq2", "limma", "edgeR", "Falcon"),
TP = c(metrics_deseq2$TP, metrics_limma$TP, metrics_edgeR$TP, metrics_Falcon$TP),
FP = c(metrics_deseq2$FP, metrics_limma$FP, metrics_edgeR$FP,metrics_Falcon$FP),
FN = c(metrics_deseq2$FN, metrics_limma$FN, metrics_edgeR$FN,metrics_Falcon$FN),
TN = c(metrics_deseq2$TN, metrics_limma$TN, metrics_edgeR$TN,metrics_Falcon$TN),
TP_percent = c(percentages_deseq2$TP_percent, percentages_limma$TP_percent, percentages_edgeR$TP_percent,percentages_Falcon$TP_percent),
FP_percent = c(percentages_deseq2$FP_percent, percentages_limma$FP_percent, percentages_edgeR$FP_percent,percentages_Falcon$FP_percent),
FN_percent = c(percentages_deseq2$FN_percent, percentages_limma$FN_percent, percentages_edgeR$FN_percent,percentages_Falcon$FN_percent),
TN_percent = c(percentages_deseq2$TN_percent, percentages_limma$TN_percent, percentages_edgeR$TN_percent,percentages_Falcon$TN_percent)
)
# Display the result
print(results)
sum(c@Results$Levene_P.value<0.05)
z<-res_Falcon[which(res_Falcon$Levene_P.value>0.05),]
p.adjust(z, method = "BH", n=length(z))
p.adjust(as.numeric(z), method = "BH", n=length(z))
adjusted_p_values <- p.adjust(z, method = "BH", n = length(z))
z
dim(z)[1]
